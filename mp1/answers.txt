######## mp1.1 ########
1、比较cool-support中的list类和c++ STL中的list类有何不同
    cool-support中的list是模板类型。它含有两个私有属性head和tail，head是指向list中第一个元素的指针，而tail是指向list中除第一个元素外的其余元素组成的list的指针。它只提供两个成员函数：hd()和tl()，分别返回这两个指针。通过hd()和tl()的组合，可以获取list中任意位置的元素。
    c++STL中的list是一个线性容器，本质是一个双向链表，其中的每个元素通过指针与它的前一个和后一个元素连接。list可以方便地进行插入、删除、移动元素的操作，但不能通过索引直接查找元素。它提供了包括迭代器在内的多种方法对元素进行操作。
    两者的主要区别在于结构不同：cool-support中的list类似于Lisp语言中的list，由第一个元素（表头）和剩余元素构成的list（表尾）两部分组成，是一种递归结构；而c++STL中的list是普通的链表结构，各个元素通过指针依次相连，通常表头指第一个元素，表尾指最后一个元素。

2、说明stringtab的意义
    编译器需要管理大量的符号串，包括标识符、数字常量、字符串等等。string table是为了能够紧凑、高效地存储并管理这些串而采用的数据结构。
    每个串在string table中占用一个条目，这个条目中还存储了与这个串有关的信息，如索引、串的长度等。string table提供了多种查询、插入的方法。
    在cool编译器结构中，提供了三个string table，分别用于存放标识符、整数和字符串，以便容易地区分这三种类型的串。

######## mp1.3 ########
    移进-归约冲突分析：
    通过对'+','-','*','/',ASSIGN,'<',LE的优先级和结合性定义，可以消除算数运算表达式、赋值表达式和比较表达式之间的的移进-归约冲突。
    通过对'.','@'的优先级和结合性定义，可以消除dispatch表达式和上述表达式间的冲突。
    目前实现的分析器中还存在18个移进-归约冲突，它们是let表达式和其他表达式之间的冲突。由于在let表达式的定义中，尾部的expr包含尽可能多的token，因此bison默认的移进操作能够正确处理这种冲突。

######## mp1.3 第二次提交 ########
    实现的错误处理有：
    class：可以处理class类的类名、继承的基类错误或末尾的分号缺失。class中可能包含feature_list，它内部出现的错误交给下层处理。
    feature_list:其中用分号间隔的各个feature处理各自的错误。feature中可能包含formal_list和expression部分，它们内部出现的错误交给下层处理。
    formal_list:其中一个formal错误，可以跳到下一个formal。
    expression:可以处理条件语句、循环语句、let语句和case语句中的部分错误。例如，可以处理条件语句中除了末尾的fi缺失外的其他错误、循环语句中末尾的pool缺失外的其他错误。可以处理let语句中变量列表错误或in缺失错误。
    expression block:其中一条表达式错误，可以跳出到下一条表达式。
    expression list:其中一条表达式错误，可以跳到下一条表达式。

    错误样例见bison_test_bad.cl，其中的错误分别是：
    #30 类名错误
    #31 attribute错误
    #33 formal_list错误
    #38 expression list 错误
    #39 if语句错误
    #52 case语句错误
    #59 类定义错误，并缺少末尾分号
    #61 inherits关键字错误
    #83 let语句错误
    #107 文件结尾的class缺少分号
