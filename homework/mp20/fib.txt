    我在手工编写fib-m.ll时，遇到的最大问题是对llvm IR语法不熟悉，尤其是指针的处理、数组下标的计算、条件转移等。
    实验中几个关键点的处理如下：
    1、条件转移
    对n == 0 ? 0 : n == 1 ? 1 : fib(n-2) + fib(n-1);语句的处理仿照ternary中的做法。首先用icmp指令进行第一次判断，判断n是否等于0。如果条件成立，则转移到标号cond1.true，否则转移到标号cond1.false。在标号cond1.true处，函数应当返回整数0。我起初想在这里给某个变量赋值为0，但后来想到不必如此，只需转移到整个条件判断结束的地方，然后在后面的phi指令中相应位置直接填0即可。
    在标号cond1.false处，要进行第二次判断，判断n是否等于1。如果条件成立，转移到标号cond2.true处，否则转移到cond2.false处。在cond2.true处与在cond1.true处相同，直接转移到cond.end。
    在cond2.false处，要进行递归调用。函数调用的语法借鉴自Function_declaration.ll。在函数调用之前，要计算参数，在本例中是要进行两次减法运算。由于斐波那契数是自然数，因此在sub指令中用"nuw"标识若发生无符号溢出，则结果无效。
将两此函数调用的返回值相加，得到在cond2.false下的返回值。
    最后，由于LLVM IR是一种基于SSA的中间表示，因此在cond.end中，要用phi指令将上述条件判断三种情况下的返回值统一起来。phi指令的语法是
<result> = phi <ty> [ <val0>, <label0>], ...
phi指令必须是一个基本块的第一条指令。在结果类型ty之后，跟着若干对参数，每一对来自于当前基本块的一个前驱基本块。其中val处填写三种情形下的返回值，label处填写它们各自所属的基本块的标号。将经过phi指令统一后的返回值作为fib函数最终的返回值。

    2、指针类型
    main函数接受的第二个参数是char *argv[]，它本质是一个指向指针的指针，类型为char **，在llvm IR 中相应的类型为i8**。在为它分配存储空间时，alloca指令后的类型为i8**。我起初对alloca指令的参数意义没有清楚的认识，在这里犯过错误。alloca指令返回一个类型为i8***的变量，用store指令将argv存储到该变量指向的位置。

    3、数组下标计算
    在看过getelementptr.ll中的示例后，我对数组下标的计算仍然不清楚，因此查阅了官方文档。
    getelementptr指令根据下标计算一个“聚合数据结构”（数组、结构体等）中某个元素的地址。getelementptr指令的语法有三种，本实验中我用的是第一种
    <result> = getelementptr <ty>, <ty>* <ptrval>{, [inrange] <ty> <idx>}*
    getelementptr的第一个参数是计算中使用的基准类型，第二个参数是“聚合数据结构”的基址，它一定是一个指向基准类型的指针。后面可选的参数是各维下标。在本实验中，数组只有一维，因此只需提供一个下标1。至于下标的类型，在索引数组元素时允许是任意位宽的整形，我仿照示例定义为i64类型。

