StreamChecker有很多可以改进的地方。在本实验中，我们决定做如下改进：
    （1）为该Checker增添对更多文件操作函数的检测，如freopen，fscanf，fprintf，fputc，fgetc，fputs，fgets等。
    （2）进一步判断对某文件进行的读写操作是否与打开文件时的模式一致。例如，以
        FILE *fp = fopen("foo.txt", "r");
打开文件后，不能进行
        fprintf(fp, "a");
操作。
    由于我们是在原有Checker基础上做的改进，因此无需重新注册。
    我们的具体实现方案是，为了实现第一点，在StreamChecker类中为这些文件操作注册了相应的处理函数。对于freopen，需要类似于对fopen的处理，取出函数调用语句中的文件描述符，并在StreamMap表中为它建立条目，其状态设为Opened。对于其他函数，调用CheckNullStream检查一下文件描述符是否有效。
    实现第二点有几个难点，一是需要对StreamState类做一点改动，在该类中添加一个域M，用来记录文件的打开模式。我们定义了可选的三种打开模式，Read，Write和Both。该类的构造函数也需要改动，其中添加一个参数用来设置M。二是，在调用fopen的时候，需要取出它的第二个参数即打开模式，把它转化成字符串并读取其中的字符，从而确定文件的打开模式。三是，每一个对文件进行读写的函数都需要进行该类型的检测，这通过写一个CheckInconsistency函数，然后在Fwrite等函数中调用它来实现。
    取fopen的第二个参数并转换为字符串的方法借鉴自另一个Checker "CheckSecuritySyntaxOnly.cpp"，具体代码是
    const StringLiteral *strArg = 
        dyn_cast<StringLiteral>(CE->getArg(1)->IgnoreParenImpCasts());
    if(strArg)
      StringRef OpenMode = strArg->getString();
    CallExpr::getArg()函数返回的是Expr *类型，首先将它进行动态类型转换，变为StringLiteral *类型，（StringLiteral是Expr的子类）然后再用getString方法获取到字符串形式的参数。之后，就可以取其中的各个字符来比较了。
    确定了文件的打开模式后，在将文件描述符及状态加入StreamMap表中时，指明其打开模式。
    CheckInconsistency函数用来检测对文件的读写操作是否与打开模式一致。它接收的参数中，一个参数argIndex是用来指示文件描述符在某个函数调用中的参数位置的，因为如fprintf、fwrite等函数，文件描述符在其中的参数位置不同。另一个参数m用来指示该函数是要对文件进行读还是写操作。该函数根据文件描述符去查询StreamMap表，如果StreamMap表中记录的打开模式与传入的参数不符，就报告我们自己定义的"Inconsistent IO"类型错误。
