3.1 简要说明test.c、AST.svg、CFG.svg、和ExplodedGraph.svg之间的联系与区别
AST(抽象语法树)是源代码的抽象语法结构的树状表现形式。树中的每个结点表示源代码中的一种语法构造，其中去除了源语言中的一些细节。
CFG和ExplodedGraph是数据流分析中采用的两种数据结构。
CFG（控制流图）是用图的结构对一个程序在运行时可能走的所有流程的一种表示。在控制流图中，每个结点表示一个基本块（基本块是指代码中顺序执行的一个部分，控制流只能从基本块的第一条语句进入，从最后一条语句出去），每条边是有向的，代表控制转移。
ExplodedGraph（扩展图）是一种表示路径敏感的数据流分析的方法。路径敏感的数据流流分析在分析过程中维持路径信息（例如条件转移指令的条件），在后面的分析中能够根据这些信息将经过不同路径到达的程序点区分开。
CFG和ExplodedGraph之间的区别是，CFG是用于表示流不敏感或流敏感的分析的方式，而ExplodedGraph是表示路径敏感的分析的方式。在CFG中，每个结点表示一个基本块，而在ExplodedGraph中，每个结点表示一个（程序点，状态）对，其中记录了到达该结点时所走过的路径上的信息。


3.2
1.Checher 对于程序的分析主要是在AST上还是在CFG上进行？
CFG
2.Checker在分析程序时需要记录程序状态，这些状态一般保存在哪里？
<program point, program state> 对一起保存在ExplodedGraph的节点中。
3.简要解释分析器在分析下面程序片段时的过程，在过程中产生了哪些symbolic values?它们的关系是什么？
在分析第一行“int x = 3, y = 4;”时，创建引用常数3的SVal，创建引用x的左值（MemRegion）的SVal，然后在store中将两者关联，再创建引用常数4的SVal，创建引用y的MemRegion的SVal，然后在store中将两者关联。store是从抽象存储位置到抽象符号值的映射。
在分析第二行“int *p = &x;”时，创建引用x的左值(MemRegion)的Sval，创建引用p的MemRegion的Sval，然后在store中将两者关联（p的MemRegion映射到的值是x的MemRegion）。
在分析第三行“int z = *(p + 1);”时，先创建引用p的值的SVal和引用常数1的SVal，然后用这两个子表达式的SVal构造一个代表p+1的值的SVal，记为$1。接着构造store中与$1相关联的符号值$2，最后创建引用z的左值的Sval，并在store中将它与$2关联。


3.3
1.
C++11/14的智能指针有unique_ptr、shared_ptr、weak_ptr三种。
unique_ptr的特点是在离开作用域时能自动释放所指向的对象的内存空间，且两个unique_ptr不能指向同一个对象。不能将一个unique_ptr赋值给另一个，但两个unique_ptr之间可以转移对象的拥有权。使用unique_ptr可为处理拥有动态寿命的函数和对象提供额外保护。
与unique_ptr的独占性不同，多个shared_ptr可以共用一个对象，由最后退出作用域的shared_ptr负责对象的释放，因此需要引用计数。但它会在链式结构中遇到循环引用的问题。
weak_ptr一般需要搭配shared_ptr使用，它和shared_ptr的区别在于它不会增加引用计数，也不能直接进行对象的存取，主要用来监控与之搭配的shared_ptr的状况。由于weak_ptr不增加引用计数，因此当shared_ptr退出后，对象即被释放。使用weak_ptr进行对象存取时，要先用lock()方法将它转换为一个shared_ptr。

2.
LLVM不使用C++的RTTI是因为它有缺陷，主要是dynamic_cast<>只能用于有虚函数表的类，而且它违背了C++的“you only pay for what you use”原则，导致可执行程序过大。
LLVM提供的替代机制有：
isa<>：判断指针或引用是否指向一个指定的类的实例，返回true或false。
cast<>：将一个类型为指向基类的指针或引用转化为指向派生类的实例的指针或引用。由程序员保证其作用的对象可以正确地进行类型转化，否则引发断言错误。
dyn_cast<>：其行为类似于C++中的dynamic_cast<>，先检查指针所指的对象是否具有正确的类型，如果是，进行基类到派生类的指针类型转换，否则返回空指针。相当于isa<>测试后跟着一条cast<>语句。它不支持引用的转换。
cast_or_null<>：类似于cast<>，但可以接受空指针作为参数。
dyn_cast_or_null<>：类似于dyn_cast<>，但可以接受空指针作为参数。
以上五种模板可以被用于任何类，而不只是有虚函数的类。

3.
写一个函数，它的参数既可以是数组，也可以是std::vector，那么声明参数为auto类型。

4.
匿名命名空间告诉编译器，其中的内容只在当前翻译单元内可见，从而允许编译器做更多优化，并减少名字冲突的可能性。


3.4
1.这个 checker 对于什么对象保存了哪些状态？保存在哪里？
这个checker对于文件描述符保存了两个状态Opened和Closed，从文件描述符到其状态的映射关系存在一张StreamMap表中。

2.状态在哪些时候会发生变化？
在调用fopen()或fclose()时状态改变。

3.在哪些地方有对状态的检查？
在调用一个函数后，进行PostCall检查，如果是fopen，且文件打开成功，将一个标记文件已打开的新结点加入ExplodedGraph。
在调用一个函数前，进行PreCall检查，如果是fclose，且文件之前没有被关闭过，将一个标记文件已关闭的新结点加入ExplodedGraph，否则报告错误“多次关闭同一文件”。
当文件描述符离开作用域时，检查它们是否处于未关闭状态。如果是，报告错误，并将该文件描述符的状态从程序状态中移除。
当分析器无法追踪一个文件指针的状态时，将其从程序状态中移除。

4.函数SimpleStreamChecker::checkPointerEscape的逻辑是怎样的？实现了什么功能？用在什么地方？
函数SimpleStreamChecker::checkPointerEscape实现的功能是，当分析器无法追踪一个文件描述符时（例如当它的指针被作为全局变量，或者作为参数被传入一个分析器无法追踪的函数），将其从程序状态中移除。
该函数的逻辑是，如果是将指针传入了一个函数，且该函数不会对文件进行关闭操作，此时不做处理。否则，对于每一个无法追踪的符号，将它从StreamMap表中移除，返回移除后的状态。

5.
可以识别的bug：未关闭已打开的文件、多次关闭同一文件
不能识别的bug：打开文件前使用文件、关闭文件后使用文件、关闭未曾打开的文件
进行测试：在test3.4.5.c中，fp1、fp2、fp3是三个文件指针。当fp1所指向的文件关闭后再使用fp1进行文件读写，分析器没有检测出这个错误。在使用fp2前没有通过fopen打开文件，分析器报告warning "Function call argument is an uninitialized value"，但这不是由SimpleStreamChecker实现的错误检查。在对fp3调用fclose之前没有调用fopen打开过文件，分析器也没有检测出这个错误。


3.5
1.增加一个checker需要增加哪些文件？需要对哪些文件进行修改？
增加一个checker需要
（1）在目录lib/StaticAnalyzer/Checkers/下添加该checker的实现文件***Checker.cpp。
（2）在上述cpp文件中加入如下注册代码
void ento::registerSimpleStreamChecker(CheckerManager &mgr) {
  mgr.registerChecker<SimpleStreamChecker>();
}
（3）在Checkers.td文件中，为该checker选择一个合适的ParentPackage，将该checker的信息放入其中。
（4）向lib/StaticAnalyzer/Checkers/CMakeLists.txt添加该checker的源文件。

3..td文件在clang中出现多次，比如这里的clang/include/clang/StaticAnalyzer/Checkers/Checkers.td。这类文件的作用是什么？它是怎样生成C++头文件或源文件的？这个机制有什么好处？
.td文件包含TableGen代码，TableGen是一种用来描述专门领域的记录信息的语言，它是llvm的项目之一。通过TableGen，可以对输入的.td文件进行语法分析，将其转换为一种内部表示并交给专门领域的后端处理。在clang中，它用来产生C/C++文件。这样做的好处是
